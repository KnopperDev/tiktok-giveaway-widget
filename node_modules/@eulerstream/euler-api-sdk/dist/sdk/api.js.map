{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/sdk/api.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * The Sign Server™\n * Sign Server API Documentation\n *\n * The version of the OpenAPI document: dev\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';\n\n/**\n * \n * @export\n * @interface Account\n */\nexport interface Account {\n    /**\n     * \n     * @type {number}\n     * @memberof Account\n     */\n    'day': number;\n    /**\n     * \n     * @type {number}\n     * @memberof Account\n     */\n    'hour': number;\n    /**\n     * \n     * @type {number}\n     * @memberof Account\n     */\n    'minute': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'webhook_secret': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Account\n     */\n    'max_alerts': number;\n    /**\n     * \n     * @type {number}\n     * @memberof Account\n     */\n    'max_websockets': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'expires_at': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'updated_at': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'created_at': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Account\n     */\n    'id': number;\n}\n/**\n * \n * @export\n * @interface AccountConfig\n */\nexport interface AccountConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof AccountConfig\n     */\n    'day': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountConfig\n     */\n    'hour': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountConfig\n     */\n    'minute': number;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountConfig\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountConfig\n     */\n    'webhook_secret': string;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountConfig\n     */\n    'max_alerts': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountConfig\n     */\n    'max_websockets': number;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountConfig\n     */\n    'expires_at': string | null;\n}\n/**\n * \n * @export\n * @enum {number}\n */\n\nexport const AccountScopes = {\n    NUMBER_MINUS_1: -1,\n    NUMBER_0: 0,\n    NUMBER_1: 1,\n    NUMBER_3: 3,\n    NUMBER_5: 5,\n    NUMBER_6: 6,\n    NUMBER_7: 7,\n    NUMBER_8: 8,\n    NUMBER_9: 9,\n    NUMBER_10: 10,\n    NUMBER_11: 11\n} as const;\n\nexport type AccountScopes = typeof AccountScopes[keyof typeof AccountScopes];\n\n\n/**\n * \n * @export\n * @interface AccountWithPermissionsSafe\n */\nexport interface AccountWithPermissionsSafe {\n    /**\n     * \n     * @type {number}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'day': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'hour': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'minute': number;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'webhook_secret': string;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'max_alerts': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'max_websockets': number;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'expires_at': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'updated_at': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'created_at': string;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'id': number;\n    /**\n     * \n     * @type {Array<AccountScopes>}\n     * @memberof AccountWithPermissionsSafe\n     */\n    'scopes': Array<AccountScopes>;\n}\n/**\n * \n * @export\n * @interface AccountsTableRequestLimits\n */\nexport interface AccountsTableRequestLimits {\n    /**\n     * \n     * @type {number}\n     * @memberof AccountsTableRequestLimits\n     */\n    'day': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountsTableRequestLimits\n     */\n    'hour': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountsTableRequestLimits\n     */\n    'minute': number;\n}\n/**\n * \n * @export\n * @interface Alert\n */\nexport interface Alert {\n    /**\n     * \n     * @type {number}\n     * @memberof Alert\n     */\n    'account_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof Alert\n     */\n    'alert_creator_id': number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Alert\n     */\n    'read_only': boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Alert\n     */\n    'alert_creator_nickname': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof Alert\n     */\n    'alert_creator_avatar_url': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof Alert\n     */\n    'alert_creator_username': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Alert\n     */\n    'created_at': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Alert\n     */\n    'id': number;\n}\n/**\n * \n * @export\n * @interface AlertConfig\n */\nexport interface AlertConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof AlertConfig\n     */\n    'account_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AlertConfig\n     */\n    'alert_creator_id': number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AlertConfig\n     */\n    'read_only': boolean;\n}\n/**\n * \n * @export\n * @interface AlertTarget\n */\nexport interface AlertTarget {\n    /**\n     * \n     * @type {string}\n     * @memberof AlertTarget\n     */\n    'url': string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: any; }}\n     * @memberof AlertTarget\n     */\n    'metadata': { [key: string]: any; };\n    /**\n     * \n     * @type {number}\n     * @memberof AlertTarget\n     */\n    'alert_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AlertTarget\n     */\n    'alert_creator_id': number;\n    /**\n     * \n     * @type {AlertTargetStatus}\n     * @memberof AlertTarget\n     */\n    'last_status': AlertTargetStatus;\n    /**\n     * \n     * @type {AlertTargetFormat}\n     * @memberof AlertTarget\n     */\n    'format': AlertTargetFormat;\n    /**\n     * \n     * @type {number}\n     * @memberof AlertTarget\n     */\n    'account_id': number;\n    /**\n     * \n     * @type {string}\n     * @memberof AlertTarget\n     */\n    'updated_at': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AlertTarget\n     */\n    'created_at': string;\n    /**\n     * \n     * @type {number}\n     * @memberof AlertTarget\n     */\n    'id': number;\n}\n\n\n/**\n * \n * @export\n * @interface AlertTargetConfig\n */\nexport interface AlertTargetConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof AlertTargetConfig\n     */\n    'url': string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: any; }}\n     * @memberof AlertTargetConfig\n     */\n    'metadata': { [key: string]: any; };\n    /**\n     * \n     * @type {number}\n     * @memberof AlertTargetConfig\n     */\n    'alert_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AlertTargetConfig\n     */\n    'alert_creator_id': number;\n    /**\n     * \n     * @type {AlertTargetStatus}\n     * @memberof AlertTargetConfig\n     */\n    'last_status': AlertTargetStatus;\n    /**\n     * \n     * @type {AlertTargetFormat}\n     * @memberof AlertTargetConfig\n     */\n    'format': AlertTargetFormat;\n}\n\n\n/**\n * \n * @export\n * @enum {number}\n */\n\nexport const AlertTargetFormat = {\n    NUMBER_1: 1\n} as const;\n\nexport type AlertTargetFormat = typeof AlertTargetFormat[keyof typeof AlertTargetFormat];\n\n\n/**\n * \n * @export\n * @enum {number}\n */\n\nexport const AlertTargetStatus = {\n    NUMBER_0: 0,\n    NUMBER_1: 1,\n    NUMBER_4: 4\n} as const;\n\nexport type AlertTargetStatus = typeof AlertTargetStatus[keyof typeof AlertTargetStatus];\n\n\n/**\n * \n * @export\n * @interface ApiKey\n */\nexport interface ApiKey {\n    /**\n     * \n     * @type {string}\n     * @memberof ApiKey\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ApiKey\n     */\n    'value': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ApiKey\n     */\n    'account_id': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ApiKey\n     */\n    'updated_at': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ApiKey\n     */\n    'created_at': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ApiKey\n     */\n    'id': number;\n}\n/**\n * \n * @export\n * @interface ApiKeyConfig\n */\nexport interface ApiKeyConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof ApiKeyConfig\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ApiKeyConfig\n     */\n    'value': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ApiKeyConfig\n     */\n    'account_id': number;\n}\n/**\n * \n * @export\n * @interface CountSignUsage\n */\nexport interface CountSignUsage {\n    /**\n     * \n     * @type {number}\n     * @memberof CountSignUsage\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof CountSignUsage\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CountSignUsage\n     */\n    'pages'?: number;\n}\n/**\n * Configuration for the alert\n * @export\n * @interface CreateAlertRequest\n */\nexport interface CreateAlertRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAlertRequest\n     */\n    'unique_id': string;\n}\n/**\n * \n * @export\n * @interface CreateAlertResponse\n */\nexport interface CreateAlertResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAlertResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAlertResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Alert}\n     * @memberof CreateAlertResponse\n     */\n    'alert'?: Alert;\n}\n/**\n * \n * @export\n * @interface CreateAlertTargetPayload\n */\nexport interface CreateAlertTargetPayload {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAlertTargetPayload\n     */\n    'url': string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateAlertTargetPayload\n     */\n    'metadata'?: { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateAlertTargetResponse\n */\nexport interface CreateAlertTargetResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAlertTargetResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAlertTargetResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {AlertTarget}\n     * @memberof CreateAlertTargetResponse\n     */\n    'target'?: AlertTarget;\n}\n/**\n * \n * @export\n * @interface CreateJWTResponse\n */\nexport interface CreateJWTResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateJWTResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateJWTResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateJWTResponse\n     */\n    'token'?: string;\n    /**\n     * \n     * @type {JWTConfig}\n     * @memberof CreateJWTResponse\n     */\n    'config'?: JWTConfig;\n}\n/**\n * \n * @export\n * @interface CreateKeyPayload\n */\nexport interface CreateKeyPayload {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateKeyPayload\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface CreateKeyResponse\n */\nexport interface CreateKeyResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateKeyResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateKeyResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {ApiKey}\n     * @memberof CreateKeyResponse\n     */\n    'key'?: ApiKey;\n}\n/**\n * \n * @export\n * @interface DeleteAlertResponse\n */\nexport interface DeleteAlertResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof DeleteAlertResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof DeleteAlertResponse\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface DeleteAlertTargetResponse\n */\nexport interface DeleteAlertTargetResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof DeleteAlertTargetResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof DeleteAlertTargetResponse\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface DeleteKeyResponse\n */\nexport interface DeleteKeyResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof DeleteKeyResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof DeleteKeyResponse\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface GetRateLimits\n */\nexport interface GetRateLimits {\n    /**\n     * \n     * @type {number}\n     * @memberof GetRateLimits\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetRateLimits\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {RateLimitInfo}\n     * @memberof GetRateLimits\n     */\n    'day'?: RateLimitInfo;\n    /**\n     * \n     * @type {RateLimitInfo}\n     * @memberof GetRateLimits\n     */\n    'hour'?: RateLimitInfo;\n    /**\n     * \n     * @type {RateLimitInfo}\n     * @memberof GetRateLimits\n     */\n    'minute'?: RateLimitInfo;\n    /**\n     * \n     * @type {LoadShedInfo}\n     * @memberof GetRateLimits\n     */\n    'load_shedding': LoadShedInfo;\n}\n/**\n * \n * @export\n * @interface GetSignUsageResponse\n */\nexport interface GetSignUsageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof GetSignUsageResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetSignUsageResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<SignLogPublic>}\n     * @memberof GetSignUsageResponse\n     */\n    'usage'?: Array<SignLogPublic>;\n}\n/**\n * \n * @export\n * @interface GetSignWebcastUrlResponse\n */\nexport interface GetSignWebcastUrlResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof GetSignWebcastUrlResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetSignWebcastUrlResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetSignWebcastUrlResponse\n     */\n    'signedUrl'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetSignWebcastUrlResponse\n     */\n    'msToken'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetSignWebcastUrlResponse\n     */\n    'browserVersion'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetSignWebcastUrlResponse\n     */\n    'browserName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetSignWebcastUrlResponse\n     */\n    '_signature'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetSignWebcastUrlResponse\n     */\n    'X-Bogus'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetSignWebcastUrlResponse\n     */\n    'User-Agent'?: string;\n}\n/**\n * \n * @export\n * @interface HostsResponse\n */\nexport interface HostsResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof HostsResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof HostsResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<PeerPresence>}\n     * @memberof HostsResponse\n     */\n    'hosts'?: Array<PeerPresence>;\n}\n/**\n * \n * @export\n * @interface JSONResponse\n */\nexport interface JSONResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof JSONResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof JSONResponse\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface JWTConfig\n */\nexport interface JWTConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof JWTConfig\n     */\n    'id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfig\n     */\n    'expiresAt': number;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfig\n     */\n    'ttl': number;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfig\n     */\n    'accountId': number;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfig\n     */\n    'apiKeyId': number;\n    /**\n     * \n     * @type {AccountsTableRequestLimits}\n     * @memberof JWTConfig\n     */\n    'limits': AccountsTableRequestLimits;\n    /**\n     * \n     * @type {JWTConfigWebSocketData}\n     * @memberof JWTConfig\n     */\n    'webSocketData': JWTConfigWebSocketData;\n    /**\n     * \n     * @type {string}\n     * @memberof JWTConfig\n     */\n    'name': string | null;\n}\n/**\n * \n * @export\n * @interface JWTConfigWebSocketData\n */\nexport interface JWTConfigWebSocketData {\n    /**\n     * \n     * @type {string}\n     * @memberof JWTConfigWebSocketData\n     */\n    'encryptedTtTargetIdc'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JWTConfigWebSocketData\n     */\n    'encryptedSessionId'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof JWTConfigWebSocketData\n     */\n    'allowedCreators': Array<string> | null;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfigWebSocketData\n     */\n    'maxWebSockets': number;\n}\n/**\n * \n * @export\n * @interface JWTCreateConfig\n */\nexport interface JWTCreateConfig {\n    /**\n     * \n     * @type {AccountsTableRequestLimits}\n     * @memberof JWTCreateConfig\n     */\n    'limits'?: AccountsTableRequestLimits | null;\n    /**\n     * \n     * @type {JWTCreateConfigWebSocketData}\n     * @memberof JWTCreateConfig\n     */\n    'websockets'?: JWTCreateConfigWebSocketData | null;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTCreateConfig\n     */\n    'expireAfter': number;\n    /**\n     * \n     * @type {string}\n     * @memberof JWTCreateConfig\n     */\n    'name'?: string;\n}\n/**\n * \n * @export\n * @interface JWTCreateConfigWebSocketData\n */\nexport interface JWTCreateConfigWebSocketData {\n    /**\n     * \n     * @type {string}\n     * @memberof JWTCreateConfigWebSocketData\n     */\n    'ttTargetIdc'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JWTCreateConfigWebSocketData\n     */\n    'sessionId'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof JWTCreateConfigWebSocketData\n     */\n    'allowedCreators': Array<string> | null;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTCreateConfigWebSocketData\n     */\n    'maxWebSockets': number;\n}\n/**\n * \n * @export\n * @interface ListAlertTargetsResponse\n */\nexport interface ListAlertTargetsResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ListAlertTargetsResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ListAlertTargetsResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<AlertTarget>}\n     * @memberof ListAlertTargetsResponse\n     */\n    'targets'?: Array<AlertTarget>;\n}\n/**\n * \n * @export\n * @interface ListAlertsResponse\n */\nexport interface ListAlertsResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ListAlertsResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ListAlertsResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<Alert>}\n     * @memberof ListAlertsResponse\n     */\n    'alerts'?: Array<Alert>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ListAlertsResponse\n     */\n    'hasMore': boolean;\n}\n/**\n * \n * @export\n * @interface ListKeysResponse\n */\nexport interface ListKeysResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ListKeysResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ListKeysResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<ApiKey>}\n     * @memberof ListKeysResponse\n     */\n    'keys'?: Array<ApiKey>;\n}\n/**\n * \n * @export\n * @interface LoadShedInfo\n */\nexport interface LoadShedInfo {\n    /**\n     * \n     * @type {number}\n     * @memberof LoadShedInfo\n     */\n    'at': number;\n    /**\n     * \n     * @type {number}\n     * @memberof LoadShedInfo\n     */\n    'chance': number;\n}\n/**\n * Make all properties in T optional\n * @export\n * @interface PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n */\nexport interface PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber {\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'avatar_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'nickname'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'sec_uid'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'numeric_uid'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'signature'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'is_verified'?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'following'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'followers'?: number;\n}\n/**\n * Make all properties in T optional\n * @export\n * @interface PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray\n */\nexport interface PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray {\n    /**\n     * \n     * @type {string}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray\n     */\n    'signedUrl'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray\n     */\n    'userAgent'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray\n     */\n    'browserName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray\n     */\n    'browserVersion'?: string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: string; }}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray\n     */\n    'tokens'?: { [key: string]: string; };\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: string; }}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray\n     */\n    'requestHeaders'?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<{ [key: string]: string; }>}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray\n     */\n    'cookies'?: Array<{ [key: string]: string; }>;\n}\n/**\n * Make all properties in T optional\n * @export\n * @interface PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n */\nexport interface PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString {\n    /**\n     * \n     * @type {number}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'status'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'is_live'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'id'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'cover_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'title'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'start_time'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'current_viewers'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'total_viewers'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'hls_pull_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'flv_pull_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'hls_pull_url_ld'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString\n     */\n    'flv_pull_url_ld'?: string;\n}\n/**\n * \n * @export\n * @interface PeerPresence\n */\nexport interface PeerPresence {\n    /**\n     * \n     * @type {number}\n     * @memberof PeerPresence\n     */\n    'lastSeen': number;\n    /**\n     * \n     * @type {PeerRole}\n     * @memberof PeerPresence\n     */\n    'role': PeerRole;\n    /**\n     * \n     * @type {string}\n     * @memberof PeerPresence\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof PeerPresence\n     */\n    'type': PeerPresenceTypeEnum;\n}\n\nexport const PeerPresenceTypeEnum = {\n    Api: 'api',\n    Agent: 'agent'\n} as const;\n\nexport type PeerPresenceTypeEnum = typeof PeerPresenceTypeEnum[keyof typeof PeerPresenceTypeEnum];\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const PeerRole = {\n    Public: 'public',\n    Enterprise: 'enterprise',\n    Staging: 'staging'\n} as const;\n\nexport type PeerRole = typeof PeerRole[keyof typeof PeerRole];\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const ProxyRegion = {\n    De: 'DE',\n    Es: 'ES',\n    Fr: 'FR',\n    Gb: 'GB',\n    Pl: 'PL'\n} as const;\n\nexport type ProxyRegion = typeof ProxyRegion[keyof typeof ProxyRegion];\n\n\n/**\n * \n * @export\n * @interface RateLimitInfo\n */\nexport interface RateLimitInfo {\n    /**\n     * \n     * @type {number}\n     * @memberof RateLimitInfo\n     */\n    'max': number;\n    /**\n     * \n     * @type {number}\n     * @memberof RateLimitInfo\n     */\n    'remaining': number;\n    /**\n     * \n     * @type {string}\n     * @memberof RateLimitInfo\n     */\n    'reset_at': string | null;\n}\n/**\n * \n * @export\n * @interface RecordStringIsLiveBooleanRoomIdStringOrNullValue\n */\nexport interface RecordStringIsLiveBooleanRoomIdStringOrNullValue {\n    /**\n     * \n     * @type {string}\n     * @memberof RecordStringIsLiveBooleanRoomIdStringOrNullValue\n     */\n    'room_id': string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RecordStringIsLiveBooleanRoomIdStringOrNullValue\n     */\n    'is_live': boolean;\n}\n/**\n * \n * @export\n * @interface RetrieveAccountResponse\n */\nexport interface RetrieveAccountResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof RetrieveAccountResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveAccountResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {AccountWithPermissionsSafe}\n     * @memberof RetrieveAccountResponse\n     */\n    'account'?: AccountWithPermissionsSafe;\n}\n/**\n * \n * @export\n * @interface RetrieveAgentHostsResponse\n */\nexport interface RetrieveAgentHostsResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof RetrieveAgentHostsResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveAgentHostsResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<PeerPresence>}\n     * @memberof RetrieveAgentHostsResponse\n     */\n    'agents': Array<PeerPresence>;\n}\n/**\n * \n * @export\n * @interface RetrieveAggregateUsageResponse\n */\nexport interface RetrieveAggregateUsageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof RetrieveAggregateUsageResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveAggregateUsageResponse\n     */\n    'message'?: string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: { [key: string]: any; }; }}\n     * @memberof RetrieveAggregateUsageResponse\n     */\n    'usage'?: { [key: string]: { [key: string]: any; }; };\n}\n/**\n * \n * @export\n * @interface RetrieveAlertResponse\n */\nexport interface RetrieveAlertResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof RetrieveAlertResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveAlertResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Alert}\n     * @memberof RetrieveAlertResponse\n     */\n    'alert'?: Alert;\n    /**\n     * \n     * @type {RetrieveAlertResponseCreator}\n     * @memberof RetrieveAlertResponse\n     */\n    'creator'?: RetrieveAlertResponseCreator;\n}\n/**\n * \n * @export\n * @interface RetrieveAlertResponseCreator\n */\nexport interface RetrieveAlertResponseCreator {\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveAlertResponseCreator\n     */\n    'last_nickname': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveAlertResponseCreator\n     */\n    'last_avatar_url': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveAlertResponseCreator\n     */\n    'room_id': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveAlertResponseCreator\n     */\n    'state_label': string;\n    /**\n     * \n     * @type {number}\n     * @memberof RetrieveAlertResponseCreator\n     */\n    'state': number;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveAlertResponseCreator\n     */\n    'unique_id': string;\n}\n/**\n * \n * @export\n * @interface RetrieveBulkLiveCheckPayload\n */\nexport interface RetrieveBulkLiveCheckPayload {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof RetrieveBulkLiveCheckPayload\n     */\n    'user_numeric_ids': Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveBulkLiveCheckPayload\n     */\n    'session_id': string;\n}\n/**\n * \n * @export\n * @interface RetrieveBulkLiveCheckResponse\n */\nexport interface RetrieveBulkLiveCheckResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof RetrieveBulkLiveCheckResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveBulkLiveCheckResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {WebcastIsLiveOutput}\n     * @memberof RetrieveBulkLiveCheckResponse\n     */\n    'response'?: WebcastIsLiveOutput;\n}\n/**\n * \n * @export\n * @interface RetrieveKeyResponse\n */\nexport interface RetrieveKeyResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof RetrieveKeyResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof RetrieveKeyResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {ApiKey}\n     * @memberof RetrieveKeyResponse\n     */\n    'key'?: ApiKey;\n}\n/**\n * \n * @export\n * @interface SignLogPublic\n */\nexport interface SignLogPublic {\n    /**\n     * \n     * @type {string}\n     * @memberof SignLogPublic\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignLogPublic\n     */\n    'ts': string;\n    /**\n     * \n     * @type {number}\n     * @memberof SignLogPublic\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof SignLogPublic\n     */\n    'client': string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignLogPublic\n     */\n    'ip': string;\n    /**\n     * \n     * @type {number}\n     * @memberof SignLogPublic\n     */\n    'api_key_id': number;\n    /**\n     * \n     * @type {string}\n     * @memberof SignLogPublic\n     */\n    'user_agent': string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignLogPublic\n     */\n    'agent_id': string;\n}\n/**\n * \n * @export\n * @interface SignTikTokUrlBody\n */\nexport interface SignTikTokUrlBody {\n    /**\n     * \n     * @type {string}\n     * @memberof SignTikTokUrlBody\n     */\n    'url': string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignTikTokUrlBody\n     */\n    'userAgent'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignTikTokUrlBody\n     */\n    'method'?: SignTikTokUrlBodyMethodEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SignTikTokUrlBody\n     */\n    'sessionId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignTikTokUrlBody\n     */\n    'ttTargetIdc'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignTikTokUrlBody\n     */\n    'payload'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SignTikTokUrlBody\n     */\n    'type'?: SignTikTokUrlBodyTypeEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SignTikTokUrlBody\n     */\n    'includeBrowserParams'?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SignTikTokUrlBody\n     */\n    'includeVerifyFp'?: boolean;\n}\n\nexport const SignTikTokUrlBodyMethodEnum = {\n    Get: 'GET',\n    Post: 'POST',\n    Options: 'OPTIONS',\n    Put: 'PUT',\n    Delete: 'DELETE',\n    Patch: 'PATCH',\n    Head: 'HEAD'\n} as const;\n\nexport type SignTikTokUrlBodyMethodEnum = typeof SignTikTokUrlBodyMethodEnum[keyof typeof SignTikTokUrlBodyMethodEnum];\nexport const SignTikTokUrlBodyTypeEnum = {\n    Fetch: 'fetch',\n    Xhr: 'xhr'\n} as const;\n\nexport type SignTikTokUrlBodyTypeEnum = typeof SignTikTokUrlBodyTypeEnum[keyof typeof SignTikTokUrlBodyTypeEnum];\n\n/**\n * \n * @export\n * @interface SignTikTokUrlResponse\n */\nexport interface SignTikTokUrlResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof SignTikTokUrlResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof SignTikTokUrlResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray}\n     * @memberof SignTikTokUrlResponse\n     */\n    'response'?: PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray;\n}\n/**\n * \n * @export\n * @interface SignWebcastUrl200Response\n */\nexport interface SignWebcastUrl200Response {\n    /**\n     * \n     * @type {number}\n     * @memberof SignWebcastUrl200Response\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof SignWebcastUrl200Response\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray}\n     * @memberof SignWebcastUrl200Response\n     */\n    'response'?: PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringStringArray;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const StreamType = {\n    HlsLd: 'hls_ld',\n    HlsSd: 'hls_sd',\n    FlvLd: 'flv_ld',\n    FlvSd: 'flv_sd'\n} as const;\n\nexport type StreamType = typeof StreamType[keyof typeof StreamType];\n\n\n/**\n * \n * @export\n * @interface TestAlertTargetResponse\n */\nexport interface TestAlertTargetResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof TestAlertTargetResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof TestAlertTargetResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {AlertTargetStatus}\n     * @memberof TestAlertTargetResponse\n     */\n    'status'?: AlertTargetStatus;\n    /**\n     * \n     * @type {string}\n     * @memberof TestAlertTargetResponse\n     */\n    'statusLabel'?: string;\n}\n\n\n/**\n * \n * @export\n * @interface TikTokLiveUser\n */\nexport interface TikTokLiveUser {\n    /**\n     * \n     * @type {TikTokLiveUserRaw}\n     * @memberof TikTokLiveUser\n     */\n    'raw': TikTokLiveUserRaw;\n    /**\n     * \n     * @type {PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString}\n     * @memberof TikTokLiveUser\n     */\n    'room_info'?: PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringFlvPullUrlStringHlsPullUrlLdStringFlvPullUrlLdString;\n    /**\n     * \n     * @type {TikTokLiveUserUser}\n     * @memberof TikTokLiveUser\n     */\n    'user'?: TikTokLiveUserUser;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveUser\n     */\n    'unique_id': string;\n}\n/**\n * \n * @export\n * @interface TikTokLiveUserRaw\n */\nexport interface TikTokLiveUserRaw {\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveUserRaw\n     */\n    '_note': string;\n}\n/**\n * \n * @export\n * @interface TikTokLiveUserUser\n */\nexport interface TikTokLiveUserUser {\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveUserUser\n     */\n    'avatar_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveUserUser\n     */\n    'nickname'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveUserUser\n     */\n    'sec_uid'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveUserUser\n     */\n    'numeric_uid'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveUserUser\n     */\n    'signature'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TikTokLiveUserUser\n     */\n    'is_verified'?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof TikTokLiveUserUser\n     */\n    'following'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TikTokLiveUserUser\n     */\n    'followers'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveUserUser\n     */\n    'unique_id': string;\n}\n/**\n * \n * @export\n * @interface UpdateKeyPayload\n */\nexport interface UpdateKeyPayload {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateKeyPayload\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface UpdateKeyResponse\n */\nexport interface UpdateKeyResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateKeyResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateKeyResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {ApiKey}\n     * @memberof UpdateKeyResponse\n     */\n    'config'?: ApiKey;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const WebcastFetchPlatform = {\n    Mobile: 'mobile',\n    Web: 'web'\n} as const;\n\nexport type WebcastFetchPlatform = typeof WebcastFetchPlatform[keyof typeof WebcastFetchPlatform];\n\n\n/**\n * \n * @export\n * @interface WebcastGiftInfoOutput\n */\nexport interface WebcastGiftInfoOutput {\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: any; }}\n     * @memberof WebcastGiftInfoOutput\n     */\n    'data': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface WebcastGiftInfoRouteResponse\n */\nexport interface WebcastGiftInfoRouteResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof WebcastGiftInfoRouteResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof WebcastGiftInfoRouteResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {WebcastGiftInfoOutput}\n     * @memberof WebcastGiftInfoRouteResponse\n     */\n    'response'?: WebcastGiftInfoOutput;\n}\n/**\n * \n * @export\n * @interface WebcastIsLiveOutput\n */\nexport interface WebcastIsLiveOutput {\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: RecordStringIsLiveBooleanRoomIdStringOrNullValue; }}\n     * @memberof WebcastIsLiveOutput\n     */\n    'data'?: { [key: string]: RecordStringIsLiveBooleanRoomIdStringOrNullValue; };\n}\n/**\n * \n * @export\n * @interface WebcastRoomChatPayload\n */\nexport interface WebcastRoomChatPayload {\n    /**\n     * \n     * @type {string}\n     * @memberof WebcastRoomChatPayload\n     */\n    'content': string;\n    /**\n     * \n     * @type {string}\n     * @memberof WebcastRoomChatPayload\n     */\n    'sessionId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof WebcastRoomChatPayload\n     */\n    'ttTargetIdc': string;\n    /**\n     * \n     * @type {string}\n     * @memberof WebcastRoomChatPayload\n     */\n    'roomId': string;\n}\n/**\n * \n * @export\n * @interface WebcastRoomChatRouteResponse\n */\nexport interface WebcastRoomChatRouteResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof WebcastRoomChatRouteResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof WebcastRoomChatRouteResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {any}\n     * @memberof WebcastRoomChatRouteResponse\n     */\n    'data'?: any;\n}\n/**\n * \n * @export\n * @interface WebcastRoomIdRouteResponse\n */\nexport interface WebcastRoomIdRouteResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof WebcastRoomIdRouteResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof WebcastRoomIdRouteResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof WebcastRoomIdRouteResponse\n     */\n    'ok': boolean;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WebcastRoomIdRouteResponse\n     */\n    'routes_attempted': Array<string>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof WebcastRoomIdRouteResponse\n     */\n    'is_live'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof WebcastRoomIdRouteResponse\n     */\n    'room_id'?: string;\n}\n/**\n * \n * @export\n * @interface WebcastRoomInfoRouteResponse\n */\nexport interface WebcastRoomInfoRouteResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof WebcastRoomInfoRouteResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof WebcastRoomInfoRouteResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof WebcastRoomInfoRouteResponse\n     */\n    'ok': boolean;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WebcastRoomInfoRouteResponse\n     */\n    'routes_attempted': Array<string>;\n    /**\n     * \n     * @type {TikTokLiveUser}\n     * @memberof WebcastRoomInfoRouteResponse\n     */\n    'data': TikTokLiveUser | null;\n}\n\n/**\n * AccountsApi - axios parameter creator\n * @export\n */\nexport const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countSignUsage: async (accountId: number, from: string, to: string, apiKeyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('countSignUsage', 'accountId', accountId)\n            // verify required parameter 'from' is not null or undefined\n            assertParamExists('countSignUsage', 'from', from)\n            // verify required parameter 'to' is not null or undefined\n            assertParamExists('countSignUsage', 'to', to)\n            const localVarPath = `/accounts/{account_id}/usage/sign_usage/page_count`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = (from as any instanceof Date) ?\n                    (from as any).toISOString() :\n                    from;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = (to as any instanceof Date) ?\n                    (to as any).toISOString() :\n                    to;\n            }\n\n            if (apiKeyId !== undefined) {\n                localVarQueryParameter['api_key_id'] = apiKeyId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {number} [page] Page number to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSignUsage: async (accountId: number, from: string, to: string, apiKeyId?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('getSignUsage', 'accountId', accountId)\n            // verify required parameter 'from' is not null or undefined\n            assertParamExists('getSignUsage', 'from', from)\n            // verify required parameter 'to' is not null or undefined\n            assertParamExists('getSignUsage', 'to', to)\n            const localVarPath = `/accounts/{account_id}/usage/sign_usage`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = (from as any instanceof Date) ?\n                    (from as any).toISOString() :\n                    from;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = (to as any instanceof Date) ?\n                    (to as any).toISOString() :\n                    to;\n            }\n\n            if (apiKeyId !== undefined) {\n                localVarQueryParameter['api_key_id'] = apiKeyId;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve an account from the Sign API\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAccountSelf: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/accounts/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check\n         * @param {number} value The value for the period (either hours or numbers)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAggregateUsage: async (accountId: number, period: RetrieveAggregateUsagePeriodEnum, value: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('retrieveAggregateUsage', 'accountId', accountId)\n            // verify required parameter 'period' is not null or undefined\n            assertParamExists('retrieveAggregateUsage', 'period', period)\n            // verify required parameter 'value' is not null or undefined\n            assertParamExists('retrieveAggregateUsage', 'value', value)\n            const localVarPath = `/accounts/{account_id}/usage/sign_usage/aggregate`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n            if (value !== undefined) {\n                localVarQueryParameter['value'] = value;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AccountsApi - functional programming interface\n * @export\n */\nexport const AccountsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountSignUsage>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.countSignUsage(accountId, from, to, apiKeyId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AccountsApi.countSignUsage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {number} [page] Page number to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignUsageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignUsage(accountId, from, to, apiKeyId, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AccountsApi.getSignUsage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve an account from the Sign API\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveAccountSelf(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveAccountResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAccountSelf(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AccountsApi.retrieveAccountSelf']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check\n         * @param {number} value The value for the period (either hours or numbers)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveAggregateUsage(accountId: number, period: RetrieveAggregateUsagePeriodEnum, value: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveAggregateUsageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAggregateUsage(accountId, period, value, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AccountsApi.retrieveAggregateUsage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AccountsApi - factory interface\n * @export\n */\nexport const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AccountsApiFp(configuration)\n    return {\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<CountSignUsage> {\n            return localVarFp.countSignUsage(accountId, from, to, apiKeyId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {number} [page] Page number to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSignUsageResponse> {\n            return localVarFp.getSignUsage(accountId, from, to, apiKeyId, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve an account from the Sign API\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAccountSelf(options?: RawAxiosRequestConfig): AxiosPromise<RetrieveAccountResponse> {\n            return localVarFp.retrieveAccountSelf(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check\n         * @param {number} value The value for the period (either hours or numbers)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAggregateUsage(accountId: number, period: RetrieveAggregateUsagePeriodEnum, value: number, options?: RawAxiosRequestConfig): AxiosPromise<RetrieveAggregateUsageResponse> {\n            return localVarFp.retrieveAggregateUsage(accountId, period, value, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AccountsApi - object-oriented interface\n * @export\n * @class AccountsApi\n * @extends {BaseAPI}\n */\nexport class AccountsApi extends BaseAPI {\n    /**\n     * Retrieve the usage logs for a specific account\n     * @param {number} accountId Account ID to retrieve usage logs for\n     * @param {string} from Start date for the logs\n     * @param {string} to End date for the logs\n     * @param {number} [apiKeyId] Optional API key ID to filter logs by\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountsApi\n     */\n    public countSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, options?: RawAxiosRequestConfig) {\n        return AccountsApiFp(this.configuration).countSignUsage(accountId, from, to, apiKeyId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve the usage logs for a specific account\n     * @param {number} accountId Account ID to retrieve usage logs for\n     * @param {string} from Start date for the logs\n     * @param {string} to End date for the logs\n     * @param {number} [apiKeyId] Optional API key ID to filter logs by\n     * @param {number} [page] Page number to retrieve\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountsApi\n     */\n    public getSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, page?: number, options?: RawAxiosRequestConfig) {\n        return AccountsApiFp(this.configuration).getSignUsage(accountId, from, to, apiKeyId, page, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve an account from the Sign API\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountsApi\n     */\n    public retrieveAccountSelf(options?: RawAxiosRequestConfig) {\n        return AccountsApiFp(this.configuration).retrieveAccountSelf(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve the usage logs for a specific account\n     * @param {number} accountId Account ID to retrieve usage logs for\n     * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check\n     * @param {number} value The value for the period (either hours or numbers)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountsApi\n     */\n    public retrieveAggregateUsage(accountId: number, period: RetrieveAggregateUsagePeriodEnum, value: number, options?: RawAxiosRequestConfig) {\n        return AccountsApiFp(this.configuration).retrieveAggregateUsage(accountId, period, value, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n/**\n * @export\n */\nexport const RetrieveAggregateUsagePeriodEnum = {\n    Hour: 'hour',\n    Day: 'day'\n} as const;\nexport type RetrieveAggregateUsagePeriodEnum = typeof RetrieveAggregateUsagePeriodEnum[keyof typeof RetrieveAggregateUsagePeriodEnum];\n\n\n/**\n * AlertTargetsApi - axios parameter creator\n * @export\n */\nexport const AlertTargetsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.\n         * @param {number} accountId The ID of the account to create the alert target for\n         * @param {number} alertId The ID of the alert to create the target for\n         * @param {CreateAlertTargetPayload} createAlertTargetPayload Configuration for the alert target\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAlertTarget: async (accountId: number, alertId: number, createAlertTargetPayload: CreateAlertTargetPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('createAlertTarget', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('createAlertTarget', 'alertId', alertId)\n            // verify required parameter 'createAlertTargetPayload' is not null or undefined\n            assertParamExists('createAlertTarget', 'createAlertTargetPayload', createAlertTargetPayload)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/create`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAlertTargetPayload, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete an alert target from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert target from\n         * @param {number} alertId The ID of the alert to delete the target from\n         * @param {number} targetId The ID of the target to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAlertTarget: async (accountId: number, alertId: number, targetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('deleteAlertTarget', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('deleteAlertTarget', 'alertId', alertId)\n            // verify required parameter 'targetId' is not null or undefined\n            assertParamExists('deleteAlertTarget', 'targetId', targetId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/{target_id}/delete`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)))\n                .replace(`{${\"target_id\"}}`, encodeURIComponent(String(targetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List all alert targets for a specific alert\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert to list targets for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAlertTargets: async (accountId: number, alertId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('listAlertTargets', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('listAlertTargets', 'alertId', alertId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/list`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Test an alert target\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert that the target belongs to\n         * @param {number} targetId The target to test\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        testAlertTarget: async (accountId: number, alertId: number, targetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('testAlertTarget', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('testAlertTarget', 'alertId', alertId)\n            // verify required parameter 'targetId' is not null or undefined\n            assertParamExists('testAlertTarget', 'targetId', targetId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/{target_id}/test`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)))\n                .replace(`{${\"target_id\"}}`, encodeURIComponent(String(targetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AlertTargetsApi - functional programming interface\n * @export\n */\nexport const AlertTargetsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AlertTargetsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.\n         * @param {number} accountId The ID of the account to create the alert target for\n         * @param {number} alertId The ID of the alert to create the target for\n         * @param {CreateAlertTargetPayload} createAlertTargetPayload Configuration for the alert target\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createAlertTarget(accountId: number, alertId: number, createAlertTargetPayload: CreateAlertTargetPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAlertTargetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlertTarget(accountId, alertId, createAlertTargetPayload, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertTargetsApi.createAlertTarget']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete an alert target from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert target from\n         * @param {number} alertId The ID of the alert to delete the target from\n         * @param {number} targetId The ID of the target to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAlertTargetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlertTarget(accountId, alertId, targetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertTargetsApi.deleteAlertTarget']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List all alert targets for a specific alert\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert to list targets for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAlertTargets(accountId: number, alertId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAlertTargetsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAlertTargets(accountId, alertId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertTargetsApi.listAlertTargets']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Test an alert target\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert that the target belongs to\n         * @param {number} targetId The target to test\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async testAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestAlertTargetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.testAlertTarget(accountId, alertId, targetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertTargetsApi.testAlertTarget']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AlertTargetsApi - factory interface\n * @export\n */\nexport const AlertTargetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AlertTargetsApiFp(configuration)\n    return {\n        /**\n         * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.\n         * @param {number} accountId The ID of the account to create the alert target for\n         * @param {number} alertId The ID of the alert to create the target for\n         * @param {CreateAlertTargetPayload} createAlertTargetPayload Configuration for the alert target\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAlertTarget(accountId: number, alertId: number, createAlertTargetPayload: CreateAlertTargetPayload, options?: RawAxiosRequestConfig): AxiosPromise<CreateAlertTargetResponse> {\n            return localVarFp.createAlertTarget(accountId, alertId, createAlertTargetPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete an alert target from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert target from\n         * @param {number} alertId The ID of the alert to delete the target from\n         * @param {number} targetId The ID of the target to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAlertTargetResponse> {\n            return localVarFp.deleteAlertTarget(accountId, alertId, targetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List all alert targets for a specific alert\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert to list targets for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAlertTargets(accountId: number, alertId: number, options?: RawAxiosRequestConfig): AxiosPromise<ListAlertTargetsResponse> {\n            return localVarFp.listAlertTargets(accountId, alertId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Test an alert target\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert that the target belongs to\n         * @param {number} targetId The target to test\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        testAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig): AxiosPromise<TestAlertTargetResponse> {\n            return localVarFp.testAlertTarget(accountId, alertId, targetId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AlertTargetsApi - object-oriented interface\n * @export\n * @class AlertTargetsApi\n * @extends {BaseAPI}\n */\nexport class AlertTargetsApi extends BaseAPI {\n    /**\n     * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.\n     * @param {number} accountId The ID of the account to create the alert target for\n     * @param {number} alertId The ID of the alert to create the target for\n     * @param {CreateAlertTargetPayload} createAlertTargetPayload Configuration for the alert target\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertTargetsApi\n     */\n    public createAlertTarget(accountId: number, alertId: number, createAlertTargetPayload: CreateAlertTargetPayload, options?: RawAxiosRequestConfig) {\n        return AlertTargetsApiFp(this.configuration).createAlertTarget(accountId, alertId, createAlertTargetPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete an alert target from the Sign API\n     * @param {number} accountId The ID of the account to delete the alert target from\n     * @param {number} alertId The ID of the alert to delete the target from\n     * @param {number} targetId The ID of the target to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertTargetsApi\n     */\n    public deleteAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig) {\n        return AlertTargetsApiFp(this.configuration).deleteAlertTarget(accountId, alertId, targetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List all alert targets for a specific alert\n     * @param {number} accountId The account that the alert belongs to\n     * @param {number} alertId The alert to list targets for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertTargetsApi\n     */\n    public listAlertTargets(accountId: number, alertId: number, options?: RawAxiosRequestConfig) {\n        return AlertTargetsApiFp(this.configuration).listAlertTargets(accountId, alertId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Test an alert target\n     * @param {number} accountId The account that the alert belongs to\n     * @param {number} alertId The alert that the target belongs to\n     * @param {number} targetId The target to test\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertTargetsApi\n     */\n    public testAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig) {\n        return AlertTargetsApiFp(this.configuration).testAlertTarget(accountId, alertId, targetId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n/**\n * AlertsApi - axios parameter creator\n * @export\n */\nexport const AlertsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a creator alert. These Alerts are used to notify users of a new livestream.\n         * @param {number} accountId The ID of the account to create the alert for\n         * @param {CreateAlertRequest} createAlertRequest Configuration for the alert\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAlert: async (accountId: number, createAlertRequest: CreateAlertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('createAlert', 'accountId', accountId)\n            // verify required parameter 'createAlertRequest' is not null or undefined\n            assertParamExists('createAlert', 'createAlertRequest', createAlertRequest)\n            const localVarPath = `/accounts/{account_id}/alerts/create`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAlertRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete an alert from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert from\n         * @param {number} alertId The ID of the alert to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAlert: async (accountId: number, alertId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('deleteAlert', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('deleteAlert', 'alertId', alertId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/delete`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} accountId \n         * @param {number} [page] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAlerts: async (accountId: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('listAlerts', 'accountId', accountId)\n            const localVarPath = `/accounts/{account_id}/alerts/list`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve a specific alert by its ID\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The ID of the alert to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAlert: async (accountId: number, alertId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('retrieveAlert', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('retrieveAlert', 'alertId', alertId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/retrieve`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AlertsApi - functional programming interface\n * @export\n */\nexport const AlertsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AlertsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a creator alert. These Alerts are used to notify users of a new livestream.\n         * @param {number} accountId The ID of the account to create the alert for\n         * @param {CreateAlertRequest} createAlertRequest Configuration for the alert\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createAlert(accountId: number, createAlertRequest: CreateAlertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAlertResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlert(accountId, createAlertRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertsApi.createAlert']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete an alert from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert from\n         * @param {number} alertId The ID of the alert to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteAlert(accountId: number, alertId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAlertResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlert(accountId, alertId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertsApi.deleteAlert']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {number} accountId \n         * @param {number} [page] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAlerts(accountId: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAlertsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAlerts(accountId, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertsApi.listAlerts']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve a specific alert by its ID\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The ID of the alert to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveAlert(accountId: number, alertId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveAlertResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAlert(accountId, alertId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertsApi.retrieveAlert']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AlertsApi - factory interface\n * @export\n */\nexport const AlertsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AlertsApiFp(configuration)\n    return {\n        /**\n         * Create a creator alert. These Alerts are used to notify users of a new livestream.\n         * @param {number} accountId The ID of the account to create the alert for\n         * @param {CreateAlertRequest} createAlertRequest Configuration for the alert\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAlert(accountId: number, createAlertRequest: CreateAlertRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateAlertResponse> {\n            return localVarFp.createAlert(accountId, createAlertRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete an alert from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert from\n         * @param {number} alertId The ID of the alert to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAlert(accountId: number, alertId: number, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAlertResponse> {\n            return localVarFp.deleteAlert(accountId, alertId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} accountId \n         * @param {number} [page] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAlerts(accountId: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<ListAlertsResponse> {\n            return localVarFp.listAlerts(accountId, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve a specific alert by its ID\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The ID of the alert to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAlert(accountId: number, alertId: number, options?: RawAxiosRequestConfig): AxiosPromise<RetrieveAlertResponse> {\n            return localVarFp.retrieveAlert(accountId, alertId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AlertsApi - object-oriented interface\n * @export\n * @class AlertsApi\n * @extends {BaseAPI}\n */\nexport class AlertsApi extends BaseAPI {\n    /**\n     * Create a creator alert. These Alerts are used to notify users of a new livestream.\n     * @param {number} accountId The ID of the account to create the alert for\n     * @param {CreateAlertRequest} createAlertRequest Configuration for the alert\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertsApi\n     */\n    public createAlert(accountId: number, createAlertRequest: CreateAlertRequest, options?: RawAxiosRequestConfig) {\n        return AlertsApiFp(this.configuration).createAlert(accountId, createAlertRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete an alert from the Sign API\n     * @param {number} accountId The ID of the account to delete the alert from\n     * @param {number} alertId The ID of the alert to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertsApi\n     */\n    public deleteAlert(accountId: number, alertId: number, options?: RawAxiosRequestConfig) {\n        return AlertsApiFp(this.configuration).deleteAlert(accountId, alertId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} accountId \n     * @param {number} [page] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertsApi\n     */\n    public listAlerts(accountId: number, page?: number, options?: RawAxiosRequestConfig) {\n        return AlertsApiFp(this.configuration).listAlerts(accountId, page, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve a specific alert by its ID\n     * @param {number} accountId The account that the alert belongs to\n     * @param {number} alertId The ID of the alert to retrieve\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertsApi\n     */\n    public retrieveAlert(accountId: number, alertId: number, options?: RawAxiosRequestConfig) {\n        return AlertsApiFp(this.configuration).retrieveAlert(accountId, alertId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n/**\n * AnalyticsApi - axios parameter creator\n * @export\n */\nexport const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Retrieve the currently connected agents\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchAgents: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/analytics/agents`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the list of API hosts (used for horizontal scaling)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getHosts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/analytics/hosts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AnalyticsApi - functional programming interface\n * @export\n */\nexport const AnalyticsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AnalyticsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Retrieve the currently connected agents\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchAgents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveAgentHostsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAgents(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.fetchAgents']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve the list of API hosts (used for horizontal scaling)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getHosts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getHosts(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getHosts']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AnalyticsApi - factory interface\n * @export\n */\nexport const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AnalyticsApiFp(configuration)\n    return {\n        /**\n         * Retrieve the currently connected agents\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchAgents(options?: RawAxiosRequestConfig): AxiosPromise<RetrieveAgentHostsResponse> {\n            return localVarFp.fetchAgents(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve the list of API hosts (used for horizontal scaling)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getHosts(options?: RawAxiosRequestConfig): AxiosPromise<HostsResponse> {\n            return localVarFp.getHosts(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AnalyticsApi - object-oriented interface\n * @export\n * @class AnalyticsApi\n * @extends {BaseAPI}\n */\nexport class AnalyticsApi extends BaseAPI {\n    /**\n     * Retrieve the currently connected agents\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AnalyticsApi\n     */\n    public fetchAgents(options?: RawAxiosRequestConfig) {\n        return AnalyticsApiFp(this.configuration).fetchAgents(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve the list of API hosts (used for horizontal scaling)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AnalyticsApi\n     */\n    public getHosts(options?: RawAxiosRequestConfig) {\n        return AnalyticsApiFp(this.configuration).getHosts(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n/**\n * AuthenticationApi - axios parameter creator\n * @export\n */\nexport const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.\n         * @param {number} accountId The ID of the account to create the JWT for\n         * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createJWT: async (accountId: number, jWTCreateConfig: JWTCreateConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('createJWT', 'accountId', accountId)\n            // verify required parameter 'jWTCreateConfig' is not null or undefined\n            assertParamExists('createJWT', 'jWTCreateConfig', jWTCreateConfig)\n            const localVarPath = `/accounts/{account_id}/jwt/create`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(jWTCreateConfig, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new API key\n         * @param {number} accountId The ID of the account to create the key for\n         * @param {CreateKeyPayload} createKeyPayload The configuration for the new key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKey: async (accountId: number, createKeyPayload: CreateKeyPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('createKey', 'accountId', accountId)\n            // verify required parameter 'createKeyPayload' is not null or undefined\n            assertParamExists('createKey', 'createKeyPayload', createKeyPayload)\n            const localVarPath = `/accounts/{account_id}/api_keys/create`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createKeyPayload, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to delete the key for\n         * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by\n         * @param {string} deleteParam The API key field value to delete by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKey: async (accountId: number, deleteBy: DeleteKeyDeleteByEnum, deleteParam: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('deleteKey', 'accountId', accountId)\n            // verify required parameter 'deleteBy' is not null or undefined\n            assertParamExists('deleteKey', 'deleteBy', deleteBy)\n            // verify required parameter 'deleteParam' is not null or undefined\n            assertParamExists('deleteKey', 'deleteParam', deleteParam)\n            const localVarPath = `/accounts/{account_id}/api_keys/delete`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (deleteBy !== undefined) {\n                localVarQueryParameter['delete_by'] = deleteBy;\n            }\n\n            if (deleteParam !== undefined) {\n                localVarQueryParameter['delete_param'] = deleteParam;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {string} retrieveParam The API key field value to retrieve by\n         * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKey: async (accountId: number, retrieveParam: string, retrieveBy?: GetKeyRetrieveByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('getKey', 'accountId', accountId)\n            // verify required parameter 'retrieveParam' is not null or undefined\n            assertParamExists('getKey', 'retrieveParam', retrieveParam)\n            const localVarPath = `/accounts/{account_id}/api_keys/retrieve`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (retrieveBy !== undefined) {\n                localVarQueryParameter['retrieve_by'] = retrieveBy;\n            }\n\n            if (retrieveParam !== undefined) {\n                localVarQueryParameter['retrieve_param'] = retrieveParam;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKeys: async (accountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('listKeys', 'accountId', accountId)\n            const localVarPath = `/accounts/{account_id}/api_keys/list`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update an existing API key\n         * @param {number} accountId The account to update the key for\n         * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by\n         * @param {string} updateParam The API key field value to update by\n         * @param {UpdateKeyPayload} updateKeyPayload The new configuration for the key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateKey: async (accountId: number, updateBy: UpdateKeyUpdateByEnum, updateParam: string, updateKeyPayload: UpdateKeyPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('updateKey', 'accountId', accountId)\n            // verify required parameter 'updateBy' is not null or undefined\n            assertParamExists('updateKey', 'updateBy', updateBy)\n            // verify required parameter 'updateParam' is not null or undefined\n            assertParamExists('updateKey', 'updateParam', updateParam)\n            // verify required parameter 'updateKeyPayload' is not null or undefined\n            assertParamExists('updateKey', 'updateKeyPayload', updateKeyPayload)\n            const localVarPath = `/accounts/{account_id}/api_keys/update`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (updateBy !== undefined) {\n                localVarQueryParameter['update_by'] = updateBy;\n            }\n\n            if (updateParam !== undefined) {\n                localVarQueryParameter['update_param'] = updateParam;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateKeyPayload, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthenticationApi - functional programming interface\n * @export\n */\nexport const AuthenticationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.\n         * @param {number} accountId The ID of the account to create the JWT for\n         * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createJWT(accountId: number, jWTCreateConfig: JWTCreateConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateJWTResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createJWT(accountId, jWTCreateConfig, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.createJWT']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new API key\n         * @param {number} accountId The ID of the account to create the key for\n         * @param {CreateKeyPayload} createKeyPayload The configuration for the new key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKey(accountId: number, createKeyPayload: CreateKeyPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createKey(accountId, createKeyPayload, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.createKey']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to delete the key for\n         * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by\n         * @param {string} deleteParam The API key field value to delete by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKey(accountId: number, deleteBy: DeleteKeyDeleteByEnum, deleteParam: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKey(accountId, deleteBy, deleteParam, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.deleteKey']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {string} retrieveParam The API key field value to retrieve by\n         * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKey(accountId: number, retrieveParam: string, retrieveBy?: GetKeyRetrieveByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getKey(accountId, retrieveParam, retrieveBy, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.getKey']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKeys(accountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListKeysResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listKeys(accountId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.listKeys']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update an existing API key\n         * @param {number} accountId The account to update the key for\n         * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by\n         * @param {string} updateParam The API key field value to update by\n         * @param {UpdateKeyPayload} updateKeyPayload The new configuration for the key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateKey(accountId: number, updateBy: UpdateKeyUpdateByEnum, updateParam: string, updateKeyPayload: UpdateKeyPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateKey(accountId, updateBy, updateParam, updateKeyPayload, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.updateKey']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AuthenticationApi - factory interface\n * @export\n */\nexport const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AuthenticationApiFp(configuration)\n    return {\n        /**\n         * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.\n         * @param {number} accountId The ID of the account to create the JWT for\n         * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createJWT(accountId: number, jWTCreateConfig: JWTCreateConfig, options?: RawAxiosRequestConfig): AxiosPromise<CreateJWTResponse> {\n            return localVarFp.createJWT(accountId, jWTCreateConfig, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new API key\n         * @param {number} accountId The ID of the account to create the key for\n         * @param {CreateKeyPayload} createKeyPayload The configuration for the new key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKey(accountId: number, createKeyPayload: CreateKeyPayload, options?: RawAxiosRequestConfig): AxiosPromise<CreateKeyResponse> {\n            return localVarFp.createKey(accountId, createKeyPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to delete the key for\n         * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by\n         * @param {string} deleteParam The API key field value to delete by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKey(accountId: number, deleteBy: DeleteKeyDeleteByEnum, deleteParam: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteKeyResponse> {\n            return localVarFp.deleteKey(accountId, deleteBy, deleteParam, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {string} retrieveParam The API key field value to retrieve by\n         * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKey(accountId: number, retrieveParam: string, retrieveBy?: GetKeyRetrieveByEnum, options?: RawAxiosRequestConfig): AxiosPromise<RetrieveKeyResponse> {\n            return localVarFp.getKey(accountId, retrieveParam, retrieveBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKeys(accountId: number, options?: RawAxiosRequestConfig): AxiosPromise<ListKeysResponse> {\n            return localVarFp.listKeys(accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update an existing API key\n         * @param {number} accountId The account to update the key for\n         * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by\n         * @param {string} updateParam The API key field value to update by\n         * @param {UpdateKeyPayload} updateKeyPayload The new configuration for the key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateKey(accountId: number, updateBy: UpdateKeyUpdateByEnum, updateParam: string, updateKeyPayload: UpdateKeyPayload, options?: RawAxiosRequestConfig): AxiosPromise<UpdateKeyResponse> {\n            return localVarFp.updateKey(accountId, updateBy, updateParam, updateKeyPayload, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AuthenticationApi - object-oriented interface\n * @export\n * @class AuthenticationApi\n * @extends {BaseAPI}\n */\nexport class AuthenticationApi extends BaseAPI {\n    /**\n     * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.\n     * @param {number} accountId The ID of the account to create the JWT for\n     * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public createJWT(accountId: number, jWTCreateConfig: JWTCreateConfig, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).createJWT(accountId, jWTCreateConfig, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new API key\n     * @param {number} accountId The ID of the account to create the key for\n     * @param {CreateKeyPayload} createKeyPayload The configuration for the new key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public createKey(accountId: number, createKeyPayload: CreateKeyPayload, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).createKey(accountId, createKeyPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete an API key by its key value, name, or ID\n     * @param {number} accountId The ID of the account to delete the key for\n     * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by\n     * @param {string} deleteParam The API key field value to delete by\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public deleteKey(accountId: number, deleteBy: DeleteKeyDeleteByEnum, deleteParam: string, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).deleteKey(accountId, deleteBy, deleteParam, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve an API key by its key value, name, or ID\n     * @param {number} accountId The ID of the account to retrieve the key for\n     * @param {string} retrieveParam The API key field value to retrieve by\n     * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public getKey(accountId: number, retrieveParam: string, retrieveBy?: GetKeyRetrieveByEnum, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).getKey(accountId, retrieveParam, retrieveBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve an API key by its key value, name, or ID\n     * @param {number} accountId The ID of the account to retrieve the key for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public listKeys(accountId: number, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).listKeys(accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update an existing API key\n     * @param {number} accountId The account to update the key for\n     * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by\n     * @param {string} updateParam The API key field value to update by\n     * @param {UpdateKeyPayload} updateKeyPayload The new configuration for the key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public updateKey(accountId: number, updateBy: UpdateKeyUpdateByEnum, updateParam: string, updateKeyPayload: UpdateKeyPayload, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).updateKey(accountId, updateBy, updateParam, updateKeyPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n/**\n * @export\n */\nexport const DeleteKeyDeleteByEnum = {\n    Value: 'value',\n    Id: 'id'\n} as const;\nexport type DeleteKeyDeleteByEnum = typeof DeleteKeyDeleteByEnum[keyof typeof DeleteKeyDeleteByEnum];\n/**\n * @export\n */\nexport const GetKeyRetrieveByEnum = {\n    Value: 'value',\n    Id: 'id'\n} as const;\nexport type GetKeyRetrieveByEnum = typeof GetKeyRetrieveByEnum[keyof typeof GetKeyRetrieveByEnum];\n/**\n * @export\n */\nexport const UpdateKeyUpdateByEnum = {\n    Value: 'value',\n    Id: 'id'\n} as const;\nexport type UpdateKeyUpdateByEnum = typeof UpdateKeyUpdateByEnum[keyof typeof UpdateKeyUpdateByEnum];\n\n\n/**\n * TikTokLIVEApi - axios parameter creator\n * @export\n */\nexport const TikTokLIVEApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room ID.\n         * @param {string} [client] The client library identifier. Used for metrics.\n         * @param {string} [roomId] The room ID to fetch the Webcast URL for.\n         * @param {string} [uniqueId] The unique ID of the TikTok user. Send this instead of a Room ID, if you\\&#39;re an Enterprise user.\n         * @param {string} [cursor] Starting cursor for the webcast connection, if any\n         * @param {string} [sessionId] Cookie - The account session ID from TikTok web\n         * @param {string} [userAgent] Override the user agent used for signing and fetching\n         * @param {string} [ttTargetIdc] Cookie - TikTok \\&quot;Identity Data Center\\&quot; which links a session_id to a region\n         * @param {boolean} [clientEnter] Whether the client enters a room after connecting, or if it\\&#39;s done by query parameters\n         * @param {ProxyRegion} [country] Country code to make the request from.\n         * @param {WebcastFetchPlatform} [platform] Platform to connect with\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchWebcastURL: async (client?: string, roomId?: string, uniqueId?: string, cursor?: string, sessionId?: string, userAgent?: string, ttTargetIdc?: string, clientEnter?: boolean, country?: ProxyRegion, platform?: WebcastFetchPlatform, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/webcast/fetch`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (client !== undefined) {\n                localVarQueryParameter['client'] = client;\n            }\n\n            if (roomId !== undefined) {\n                localVarQueryParameter['room_id'] = roomId;\n            }\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['unique_id'] = uniqueId;\n            }\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (sessionId !== undefined) {\n                localVarQueryParameter['session_id'] = sessionId;\n            }\n\n            if (userAgent !== undefined) {\n                localVarQueryParameter['user_agent'] = userAgent;\n            }\n\n            if (ttTargetIdc !== undefined) {\n                localVarQueryParameter['tt_target_idc'] = ttTargetIdc;\n            }\n\n            if (clientEnter !== undefined) {\n                localVarQueryParameter['client_enter'] = clientEnter;\n            }\n\n            if (country !== undefined) {\n                localVarQueryParameter['country'] = country;\n            }\n\n            if (platform !== undefined) {\n                localVarQueryParameter['platform'] = platform;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRateLimits: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/webcast/rate_limits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * A bulk-check endpoint to determine if a group of TikTok users (up to 50 at once) are live. It uses a highly optimized job-based system for checking large numbers of users quickly.\n         * @param {RetrieveBulkLiveCheckPayload} retrieveBulkLiveCheckPayload The body of the request containing user numeric IDs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveBulkLiveCheck: async (retrieveBulkLiveCheckPayload: RetrieveBulkLiveCheckPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'retrieveBulkLiveCheckPayload' is not null or undefined\n            assertParamExists('retrieveBulkLiveCheck', 'retrieveBulkLiveCheckPayload', retrieveBulkLiveCheckPayload)\n            const localVarPath = `/webcast/bulk_live_check`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(retrieveBulkLiveCheckPayload, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve TikTok Live Room Gift List\n         * @param {string} roomId The room ID of the TikTok LIVE session\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveGiftInfo: async (roomId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roomId' is not null or undefined\n            assertParamExists('retrieveGiftInfo', 'roomId', roomId)\n            const localVarPath = `/webcast/gift_info`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (roomId !== undefined) {\n                localVarQueryParameter['room_id'] = roomId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch TikTok LIVE Stream Cover URL given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomCover: async (uniqueId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uniqueId' is not null or undefined\n            assertParamExists('retrieveRoomCover', 'uniqueId', uniqueId)\n            const localVarPath = `/webcast/room_cover`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['uniqueId'] = uniqueId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch Room ID for a given uniqueId & whether that user is live.\n         * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomId: async (uniqueId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uniqueId' is not null or undefined\n            assertParamExists('retrieveRoomId', 'uniqueId', uniqueId)\n            const localVarPath = `/webcast/room_id`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['uniqueId'] = uniqueId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve TikTok Live Room Information\n         * @param {string} uniqueId The unique identifier for the TikTok user or room\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomInfo: async (uniqueId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uniqueId' is not null or undefined\n            assertParamExists('retrieveRoomInfo', 'uniqueId', uniqueId)\n            const localVarPath = `/webcast/room_info`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['uniqueId'] = uniqueId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch TikTok LIVE Stream video given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.\n         * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomVideo: async (uniqueId: string, streamType?: StreamType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uniqueId' is not null or undefined\n            assertParamExists('retrieveRoomVideo', 'uniqueId', uniqueId)\n            const localVarPath = `/webcast/room_video`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['uniqueId'] = uniqueId;\n            }\n\n            if (streamType !== undefined) {\n                localVarQueryParameter['streamType'] = streamType;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Send a chat to a TikTok LIVE room.\n         * @param {WebcastRoomChatPayload} webcastRoomChatPayload The payload configuration for sending a chat\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendRoomChat: async (webcastRoomChatPayload: WebcastRoomChatPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'webcastRoomChatPayload' is not null or undefined\n            assertParamExists('sendRoomChat', 'webcastRoomChatPayload', webcastRoomChatPayload)\n            const localVarPath = `/webcast/chat`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(webcastRoomChatPayload, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {SignTikTokUrlBody} signTikTokUrlBody \n         * @param {string} [client] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signWebcastUrl: async (signTikTokUrlBody: SignTikTokUrlBody, client?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'signTikTokUrlBody' is not null or undefined\n            assertParamExists('signWebcastUrl', 'signTikTokUrlBody', signTikTokUrlBody)\n            const localVarPath = `/webcast/sign_url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (client !== undefined) {\n                localVarQueryParameter['client'] = client;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(signTikTokUrlBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * TikTokLIVEApi - functional programming interface\n * @export\n */\nexport const TikTokLIVEApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = TikTokLIVEApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room ID.\n         * @param {string} [client] The client library identifier. Used for metrics.\n         * @param {string} [roomId] The room ID to fetch the Webcast URL for.\n         * @param {string} [uniqueId] The unique ID of the TikTok user. Send this instead of a Room ID, if you\\&#39;re an Enterprise user.\n         * @param {string} [cursor] Starting cursor for the webcast connection, if any\n         * @param {string} [sessionId] Cookie - The account session ID from TikTok web\n         * @param {string} [userAgent] Override the user agent used for signing and fetching\n         * @param {string} [ttTargetIdc] Cookie - TikTok \\&quot;Identity Data Center\\&quot; which links a session_id to a region\n         * @param {boolean} [clientEnter] Whether the client enters a room after connecting, or if it\\&#39;s done by query parameters\n         * @param {ProxyRegion} [country] Country code to make the request from.\n         * @param {WebcastFetchPlatform} [platform] Platform to connect with\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchWebcastURL(client?: string, roomId?: string, uniqueId?: string, cursor?: string, sessionId?: string, userAgent?: string, ttTargetIdc?: string, clientEnter?: boolean, country?: ProxyRegion, platform?: WebcastFetchPlatform, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, country, platform, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.fetchWebcastURL']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getRateLimits(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRateLimits>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getRateLimits(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.getRateLimits']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * A bulk-check endpoint to determine if a group of TikTok users (up to 50 at once) are live. It uses a highly optimized job-based system for checking large numbers of users quickly.\n         * @param {RetrieveBulkLiveCheckPayload} retrieveBulkLiveCheckPayload The body of the request containing user numeric IDs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveBulkLiveCheck(retrieveBulkLiveCheckPayload: RetrieveBulkLiveCheckPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveBulkLiveCheckResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveBulkLiveCheck(retrieveBulkLiveCheckPayload, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.retrieveBulkLiveCheck']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve TikTok Live Room Gift List\n         * @param {string} roomId The room ID of the TikTok LIVE session\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveGiftInfo(roomId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebcastGiftInfoRouteResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveGiftInfo(roomId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.retrieveGiftInfo']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch TikTok LIVE Stream Cover URL given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveRoomCover(uniqueId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JSONResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomCover(uniqueId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.retrieveRoomCover']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch Room ID for a given uniqueId & whether that user is live.\n         * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveRoomId(uniqueId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebcastRoomIdRouteResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomId(uniqueId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.retrieveRoomId']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve TikTok Live Room Information\n         * @param {string} uniqueId The unique identifier for the TikTok user or room\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveRoomInfo(uniqueId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebcastRoomInfoRouteResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomInfo(uniqueId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.retrieveRoomInfo']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch TikTok LIVE Stream video given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.\n         * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveRoomVideo(uniqueId: string, streamType?: StreamType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JSONResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomVideo(uniqueId, streamType, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.retrieveRoomVideo']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Send a chat to a TikTok LIVE room.\n         * @param {WebcastRoomChatPayload} webcastRoomChatPayload The payload configuration for sending a chat\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sendRoomChat(webcastRoomChatPayload: WebcastRoomChatPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebcastRoomChatRouteResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sendRoomChat(webcastRoomChatPayload, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.sendRoomChat']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {SignTikTokUrlBody} signTikTokUrlBody \n         * @param {string} [client] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async signWebcastUrl(signTikTokUrlBody: SignTikTokUrlBody, client?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignWebcastUrl200Response>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.signWebcastUrl(signTikTokUrlBody, client, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['TikTokLIVEApi.signWebcastUrl']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * TikTokLIVEApi - factory interface\n * @export\n */\nexport const TikTokLIVEApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = TikTokLIVEApiFp(configuration)\n    return {\n        /**\n         * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room ID.\n         * @param {string} [client] The client library identifier. Used for metrics.\n         * @param {string} [roomId] The room ID to fetch the Webcast URL for.\n         * @param {string} [uniqueId] The unique ID of the TikTok user. Send this instead of a Room ID, if you\\&#39;re an Enterprise user.\n         * @param {string} [cursor] Starting cursor for the webcast connection, if any\n         * @param {string} [sessionId] Cookie - The account session ID from TikTok web\n         * @param {string} [userAgent] Override the user agent used for signing and fetching\n         * @param {string} [ttTargetIdc] Cookie - TikTok \\&quot;Identity Data Center\\&quot; which links a session_id to a region\n         * @param {boolean} [clientEnter] Whether the client enters a room after connecting, or if it\\&#39;s done by query parameters\n         * @param {ProxyRegion} [country] Country code to make the request from.\n         * @param {WebcastFetchPlatform} [platform] Platform to connect with\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchWebcastURL(client?: string, roomId?: string, uniqueId?: string, cursor?: string, sessionId?: string, userAgent?: string, ttTargetIdc?: string, clientEnter?: boolean, country?: ProxyRegion, platform?: WebcastFetchPlatform, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, country, platform, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRateLimits(options?: RawAxiosRequestConfig): AxiosPromise<GetRateLimits> {\n            return localVarFp.getRateLimits(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * A bulk-check endpoint to determine if a group of TikTok users (up to 50 at once) are live. It uses a highly optimized job-based system for checking large numbers of users quickly.\n         * @param {RetrieveBulkLiveCheckPayload} retrieveBulkLiveCheckPayload The body of the request containing user numeric IDs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveBulkLiveCheck(retrieveBulkLiveCheckPayload: RetrieveBulkLiveCheckPayload, options?: RawAxiosRequestConfig): AxiosPromise<RetrieveBulkLiveCheckResponse> {\n            return localVarFp.retrieveBulkLiveCheck(retrieveBulkLiveCheckPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve TikTok Live Room Gift List\n         * @param {string} roomId The room ID of the TikTok LIVE session\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveGiftInfo(roomId: string, options?: RawAxiosRequestConfig): AxiosPromise<WebcastGiftInfoRouteResponse> {\n            return localVarFp.retrieveGiftInfo(roomId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch TikTok LIVE Stream Cover URL given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomCover(uniqueId: string, options?: RawAxiosRequestConfig): AxiosPromise<JSONResponse> {\n            return localVarFp.retrieveRoomCover(uniqueId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch Room ID for a given uniqueId & whether that user is live.\n         * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomId(uniqueId: string, options?: RawAxiosRequestConfig): AxiosPromise<WebcastRoomIdRouteResponse> {\n            return localVarFp.retrieveRoomId(uniqueId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve TikTok Live Room Information\n         * @param {string} uniqueId The unique identifier for the TikTok user or room\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomInfo(uniqueId: string, options?: RawAxiosRequestConfig): AxiosPromise<WebcastRoomInfoRouteResponse> {\n            return localVarFp.retrieveRoomInfo(uniqueId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch TikTok LIVE Stream video given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.\n         * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomVideo(uniqueId: string, streamType?: StreamType, options?: RawAxiosRequestConfig): AxiosPromise<JSONResponse> {\n            return localVarFp.retrieveRoomVideo(uniqueId, streamType, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Send a chat to a TikTok LIVE room.\n         * @param {WebcastRoomChatPayload} webcastRoomChatPayload The payload configuration for sending a chat\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendRoomChat(webcastRoomChatPayload: WebcastRoomChatPayload, options?: RawAxiosRequestConfig): AxiosPromise<WebcastRoomChatRouteResponse> {\n            return localVarFp.sendRoomChat(webcastRoomChatPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {SignTikTokUrlBody} signTikTokUrlBody \n         * @param {string} [client] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signWebcastUrl(signTikTokUrlBody: SignTikTokUrlBody, client?: string, options?: RawAxiosRequestConfig): AxiosPromise<SignWebcastUrl200Response> {\n            return localVarFp.signWebcastUrl(signTikTokUrlBody, client, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * TikTokLIVEApi - object-oriented interface\n * @export\n * @class TikTokLIVEApi\n * @extends {BaseAPI}\n */\nexport class TikTokLIVEApi extends BaseAPI {\n    /**\n     * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room ID.\n     * @param {string} [client] The client library identifier. Used for metrics.\n     * @param {string} [roomId] The room ID to fetch the Webcast URL for.\n     * @param {string} [uniqueId] The unique ID of the TikTok user. Send this instead of a Room ID, if you\\&#39;re an Enterprise user.\n     * @param {string} [cursor] Starting cursor for the webcast connection, if any\n     * @param {string} [sessionId] Cookie - The account session ID from TikTok web\n     * @param {string} [userAgent] Override the user agent used for signing and fetching\n     * @param {string} [ttTargetIdc] Cookie - TikTok \\&quot;Identity Data Center\\&quot; which links a session_id to a region\n     * @param {boolean} [clientEnter] Whether the client enters a room after connecting, or if it\\&#39;s done by query parameters\n     * @param {ProxyRegion} [country] Country code to make the request from.\n     * @param {WebcastFetchPlatform} [platform] Platform to connect with\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public fetchWebcastURL(client?: string, roomId?: string, uniqueId?: string, cursor?: string, sessionId?: string, userAgent?: string, ttTargetIdc?: string, clientEnter?: boolean, country?: ProxyRegion, platform?: WebcastFetchPlatform, options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, country, platform, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public getRateLimits(options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).getRateLimits(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * A bulk-check endpoint to determine if a group of TikTok users (up to 50 at once) are live. It uses a highly optimized job-based system for checking large numbers of users quickly.\n     * @param {RetrieveBulkLiveCheckPayload} retrieveBulkLiveCheckPayload The body of the request containing user numeric IDs.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public retrieveBulkLiveCheck(retrieveBulkLiveCheckPayload: RetrieveBulkLiveCheckPayload, options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).retrieveBulkLiveCheck(retrieveBulkLiveCheckPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve TikTok Live Room Gift List\n     * @param {string} roomId The room ID of the TikTok LIVE session\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public retrieveGiftInfo(roomId: string, options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).retrieveGiftInfo(roomId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Fetch TikTok LIVE Stream Cover URL given a uniqueId.\n     * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public retrieveRoomCover(uniqueId: string, options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).retrieveRoomCover(uniqueId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Fetch Room ID for a given uniqueId & whether that user is live.\n     * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public retrieveRoomId(uniqueId: string, options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).retrieveRoomId(uniqueId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve TikTok Live Room Information\n     * @param {string} uniqueId The unique identifier for the TikTok user or room\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public retrieveRoomInfo(uniqueId: string, options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).retrieveRoomInfo(uniqueId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Fetch TikTok LIVE Stream video given a uniqueId.\n     * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.\n     * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public retrieveRoomVideo(uniqueId: string, streamType?: StreamType, options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).retrieveRoomVideo(uniqueId, streamType, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Send a chat to a TikTok LIVE room.\n     * @param {WebcastRoomChatPayload} webcastRoomChatPayload The payload configuration for sending a chat\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public sendRoomChat(webcastRoomChatPayload: WebcastRoomChatPayload, options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).sendRoomChat(webcastRoomChatPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {SignTikTokUrlBody} signTikTokUrlBody \n     * @param {string} [client] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TikTokLIVEApi\n     */\n    public signWebcastUrl(signTikTokUrlBody: SignTikTokUrlBody, client?: string, options?: RawAxiosRequestConfig) {\n        return TikTokLIVEApiFp(this.configuration).signWebcastUrl(signTikTokUrlBody, client, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n"]}