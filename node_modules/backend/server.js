require("dotenv").config();
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const { WebcastPushConnection } = require("tiktok-live-connector");

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

const PORT = process.env.PORT || 3001;
const TIKTOK_USERNAME = process.env.TIKTOK_USERNAME || "YOUR_TIKTOK_USERNAME";

app.get("/", (req, res) => res.send("TikTok Giveaway Backend is running!"));
server.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// --- GIVEAWAY STATE ---
let participants = [];
let giveawayActive = false;

// Connect to TikTok
const tiktokConnection = new WebcastPushConnection(TIKTOK_USERNAME);
tiktokConnection.connect().then(() => {
  console.log(`Connected to TikTok live stream of @${TIKTOK_USERNAME}!`);
});

// --- LISTEN TO TIKTOK EVENTS ---

// Listen for chat messages
tiktokConnection.on("chat", (chatData) => {
  const message = chatData.comment.trim().toLowerCase();

  // Add participant when they type !join
  if (giveawayActive && message === "!join") {
    const user = chatData.uniqueId;
    if (!participants.includes(user)) {
      participants.push(user);
      console.log(`🎟️ ${user} joined the giveaway!`);
      io.emit("participant-joined", user);
    }
  }

  io.emit("new-chat", chatData);
});

// Gifts (optional entry method)
tiktokConnection.on("gift", (giftData) => {
  const user = giftData.uniqueId;
  if (giveawayActive && giftData.giftName === "Rose") {
    if (!participants.includes(user)) {
      participants.push(user);
      console.log(`🌹 ${user} joined via gift!`);
      io.emit("participant-joined", user);
    }
  }

  io.emit("new-gift", giftData);
});

// --- SOCKET.IO EVENTS (Frontend Controls) ---
io.on("connection", (socket) => {
  console.log("Frontend connected:", socket.id);

  socket.on("start-giveaway", () => {
    participants = [];
    giveawayActive = true;
    console.log("🎉 Giveaway started!");
    io.emit("giveaway-started");
  });

  socket.on("draw-winner", () => {
    if (participants.length === 0) return;
    const winner =
      participants[Math.floor(Math.random() * participants.length)];
    console.log(`🏆 Winner: ${winner}`);
    giveawayActive = false;
    io.emit("giveaway-winner", winner);
  });

  socket.on("reset-giveaway", () => {
    participants = [];
    giveawayActive = false;
    console.log("🔄 Giveaway reset");
    io.emit("giveaway-reset");
  });

  socket.on("disconnect", () =>
    console.log("Frontend disconnected:", socket.id)
  );
});

